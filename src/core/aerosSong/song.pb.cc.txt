// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: song.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "song.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Singul {
class SongDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Song>
     _instance;
} _Song_default_instance_;
class PartDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Part>
     _instance;
} _Part_default_instance_;
class TrackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Track>
     _instance;
} _Track_default_instance_;
class AudioLoopDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AudioLoop>
     _instance;
} _AudioLoop_default_instance_;
class TimeSignatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimeSignature>
     _instance;
} _TimeSignature_default_instance_;

namespace protobuf_song_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Song_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Song_default_instance_);_Part_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Part_default_instance_);_Track_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Track_default_instance_);_AudioLoop_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AudioLoop_default_instance_);_TimeSignature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimeSignature_default_instance_);_Song_default_instance_._instance.get_mutable()->time_sig_ = const_cast< ::Singul::TimeSignature*>(
      ::Singul::TimeSignature::internal_default_instance());
  _Track_default_instance_._instance.get_mutable()->loop_a_ = const_cast< ::Singul::AudioLoop*>(
      ::Singul::AudioLoop::internal_default_instance());
  _Track_default_instance_._instance.get_mutable()->loop_b_ = const_cast< ::Singul::AudioLoop*>(
      ::Singul::AudioLoop::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_song_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Song::kTitleFieldNumber;
const int Song::kBpmFieldNumber;
const int Song::kTimeSigFieldNumber;
const int Song::kTpqnFieldNumber;
const int Song::kCountInFieldNumber;
const int Song::kMode2X2EnabledFieldNumber;
const int Song::kQuantizeTrackEnabledFieldNumber;
const int Song::kOrderIndexFieldNumber;
const int Song::kStereoFieldNumber;
const int Song::kSyncTracksOptionFieldNumber;
const int Song::kLockedFieldNumber;
const int Song::kMidiSelectEnabledFieldNumber;
const int Song::kMidiBankMsbFieldNumber;
const int Song::kMidiProgramNumberFieldNumber;
const int Song::kOsVersionFieldNumber;
const int Song::kMetaVersionFieldNumber;
const int Song::kPartsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Song::Song()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_song_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Singul.Song)
}
Song::Song(const Song& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      locked_(from.locked_),
      parts_(from.parts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.os_version().size() > 0) {
    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  if (from.has_time_sig()) {
    time_sig_ = new ::Singul::TimeSignature(*from.time_sig_);
  } else {
    time_sig_ = NULL;
  }
  ::memcpy(&bpm_, &from.bpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&midi_program_number_) -
    reinterpret_cast<char*>(&bpm_)) + sizeof(midi_program_number_));
  // @@protoc_insertion_point(copy_constructor:Singul.Song)
}

void Song::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_sig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&midi_program_number_) -
      reinterpret_cast<char*>(&time_sig_)) + sizeof(midi_program_number_));
  _cached_size_ = 0;
}

Song::~Song() {
  // @@protoc_insertion_point(destructor:Singul.Song)
  SharedDtor();
}

void Song::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_sig_;
}

void Song::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Song& Song::default_instance() {
  protobuf_song_2eproto::InitDefaults();
  return *internal_default_instance();
}

Song* Song::New(::google::protobuf::Arena* arena) const {
  Song* n = new Song;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Song::Clear() {
// @@protoc_insertion_point(message_clear_start:Singul.Song)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locked_.Clear();
  parts_.Clear();
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && time_sig_ != NULL) {
    delete time_sig_;
  }
  time_sig_ = NULL;
  ::memset(&bpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&midi_program_number_) -
      reinterpret_cast<char*>(&bpm_)) + sizeof(midi_program_number_));
  _internal_metadata_.Clear();
}

bool Song::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Singul.Song)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Singul.Song.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bpm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Singul.TimeSignature time_sig = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_sig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tpqn = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tpqn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count_in = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mode_2x2_enabled = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mode_2x2_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool quantize_track_enabled = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quantize_track_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 order_index = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stereo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stereo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sync_tracks_option = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sync_tracks_option_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool locked = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_locked())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 162u, input, this->mutable_locked())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool midi_select_enabled = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &midi_select_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 midi_bank_msb = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midi_bank_msb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 midi_program_number = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midi_program_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string os_version = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 778 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_version().data(), static_cast<int>(this->os_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Singul.Song.os_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 meta_version = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 784 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meta_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Singul.Part parts = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Singul.Song)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Singul.Song)
  return false;
#undef DO_
}

void Song::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Singul.Song)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Singul.Song.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // float bpm = 2;
  if (this->bpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bpm(), output);
  }

  // .Singul.TimeSignature time_sig = 3;
  if (this->has_time_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->time_sig_, output);
  }

  // int32 tpqn = 11;
  if (this->tpqn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tpqn(), output);
  }

  // int32 count_in = 12;
  if (this->count_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->count_in(), output);
  }

  // bool mode_2x2_enabled = 13;
  if (this->mode_2x2_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->mode_2x2_enabled(), output);
  }

  // bool quantize_track_enabled = 14;
  if (this->quantize_track_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->quantize_track_enabled(), output);
  }

  // int32 order_index = 16;
  if (this->order_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->order_index(), output);
  }

  // bool stereo = 18;
  if (this->stereo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->stereo(), output);
  }

  // int32 sync_tracks_option = 19;
  if (this->sync_tracks_option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sync_tracks_option(), output);
  }

  // repeated bool locked = 20;
  if (this->locked_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _locked_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->locked().data(), this->locked_size(), output);
  }

  // bool midi_select_enabled = 21;
  if (this->midi_select_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->midi_select_enabled(), output);
  }

  // int32 midi_bank_msb = 22;
  if (this->midi_bank_msb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->midi_bank_msb(), output);
  }

  // int32 midi_program_number = 23;
  if (this->midi_program_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->midi_program_number(), output);
  }

  // string os_version = 97;
  if (this->os_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_version().data(), static_cast<int>(this->os_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Singul.Song.os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      97, this->os_version(), output);
  }

  // int32 meta_version = 98;
  if (this->meta_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(98, this->meta_version(), output);
  }

  // repeated .Singul.Part parts = 99;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      99, this->parts(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Singul.Song)
}

size_t Song::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Singul.Song)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bool locked = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->locked_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _locked_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Singul.Part parts = 99;
  {
    unsigned int count = static_cast<unsigned int>(this->parts_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parts(static_cast<int>(i)));
    }
  }

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string os_version = 97;
  if (this->os_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_version());
  }

  // .Singul.TimeSignature time_sig = 3;
  if (this->has_time_sig()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_sig_);
  }

  // float bpm = 2;
  if (this->bpm() != 0) {
    total_size += 1 + 4;
  }

  // int32 tpqn = 11;
  if (this->tpqn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tpqn());
  }

  // int32 count_in = 12;
  if (this->count_in() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count_in());
  }

  // int32 order_index = 16;
  if (this->order_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_index());
  }

  // bool mode_2x2_enabled = 13;
  if (this->mode_2x2_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool quantize_track_enabled = 14;
  if (this->quantize_track_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool stereo = 18;
  if (this->stereo() != 0) {
    total_size += 2 + 1;
  }

  // bool midi_select_enabled = 21;
  if (this->midi_select_enabled() != 0) {
    total_size += 2 + 1;
  }

  // int32 sync_tracks_option = 19;
  if (this->sync_tracks_option() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sync_tracks_option());
  }

  // int32 meta_version = 98;
  if (this->meta_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->meta_version());
  }

  // int32 midi_bank_msb = 22;
  if (this->midi_bank_msb() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->midi_bank_msb());
  }

  // int32 midi_program_number = 23;
  if (this->midi_program_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->midi_program_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Song::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Song*>(&from));
}

void Song::MergeFrom(const Song& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Singul.Song)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locked_.MergeFrom(from.locked_);
  parts_.MergeFrom(from.parts_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.os_version().size() > 0) {

    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  if (from.has_time_sig()) {
    mutable_time_sig()->::Singul::TimeSignature::MergeFrom(from.time_sig());
  }
  if (from.bpm() != 0) {
    set_bpm(from.bpm());
  }
  if (from.tpqn() != 0) {
    set_tpqn(from.tpqn());
  }
  if (from.count_in() != 0) {
    set_count_in(from.count_in());
  }
  if (from.order_index() != 0) {
    set_order_index(from.order_index());
  }
  if (from.mode_2x2_enabled() != 0) {
    set_mode_2x2_enabled(from.mode_2x2_enabled());
  }
  if (from.quantize_track_enabled() != 0) {
    set_quantize_track_enabled(from.quantize_track_enabled());
  }
  if (from.stereo() != 0) {
    set_stereo(from.stereo());
  }
  if (from.midi_select_enabled() != 0) {
    set_midi_select_enabled(from.midi_select_enabled());
  }
  if (from.sync_tracks_option() != 0) {
    set_sync_tracks_option(from.sync_tracks_option());
  }
  if (from.meta_version() != 0) {
    set_meta_version(from.meta_version());
  }
  if (from.midi_bank_msb() != 0) {
    set_midi_bank_msb(from.midi_bank_msb());
  }
  if (from.midi_program_number() != 0) {
    set_midi_program_number(from.midi_program_number());
  }
}

void Song::CopyFrom(const Song& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Singul.Song)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Song::IsInitialized() const {
  return true;
}

void Song::Swap(Song* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Song::InternalSwap(Song* other) {
  using std::swap;
  locked_.InternalSwap(&other->locked_);
  parts_.InternalSwap(&other->parts_);
  title_.Swap(&other->title_);
  os_version_.Swap(&other->os_version_);
  swap(time_sig_, other->time_sig_);
  swap(bpm_, other->bpm_);
  swap(tpqn_, other->tpqn_);
  swap(count_in_, other->count_in_);
  swap(order_index_, other->order_index_);
  swap(mode_2x2_enabled_, other->mode_2x2_enabled_);
  swap(quantize_track_enabled_, other->quantize_track_enabled_);
  swap(stereo_, other->stereo_);
  swap(midi_select_enabled_, other->midi_select_enabled_);
  swap(sync_tracks_option_, other->sync_tracks_option_);
  swap(meta_version_, other->meta_version_);
  swap(midi_bank_msb_, other->midi_bank_msb_);
  swap(midi_program_number_, other->midi_program_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Song::GetTypeName() const {
  return "Singul.Song";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Song

// string title = 1;
void Song::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Song::title() const {
  // @@protoc_insertion_point(field_get:Singul.Song.title)
  return title_.GetNoArena();
}
void Song::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Singul.Song.title)
}
#if LANG_CXX11
void Song::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Singul.Song.title)
}
#endif
void Song::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Singul.Song.title)
}
void Song::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Singul.Song.title)
}
::std::string* Song::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:Singul.Song.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Song::release_title() {
  // @@protoc_insertion_point(field_release:Singul.Song.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Song::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:Singul.Song.title)
}

// float bpm = 2;
void Song::clear_bpm() {
  bpm_ = 0;
}
float Song::bpm() const {
  // @@protoc_insertion_point(field_get:Singul.Song.bpm)
  return bpm_;
}
void Song::set_bpm(float value) {
  
  bpm_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.bpm)
}

// .Singul.TimeSignature time_sig = 3;
bool Song::has_time_sig() const {
  return this != internal_default_instance() && time_sig_ != NULL;
}
void Song::clear_time_sig() {
  if (GetArenaNoVirtual() == NULL && time_sig_ != NULL) delete time_sig_;
  time_sig_ = NULL;
}
const ::Singul::TimeSignature& Song::time_sig() const {
  const ::Singul::TimeSignature* p = time_sig_;
  // @@protoc_insertion_point(field_get:Singul.Song.time_sig)
  return p != NULL ? *p : *reinterpret_cast<const ::Singul::TimeSignature*>(
      &::Singul::_TimeSignature_default_instance_);
}
::Singul::TimeSignature* Song::mutable_time_sig() {
  
  if (time_sig_ == NULL) {
    time_sig_ = new ::Singul::TimeSignature;
  }
  // @@protoc_insertion_point(field_mutable:Singul.Song.time_sig)
  return time_sig_;
}
::Singul::TimeSignature* Song::release_time_sig() {
  // @@protoc_insertion_point(field_release:Singul.Song.time_sig)
  
  ::Singul::TimeSignature* temp = time_sig_;
  time_sig_ = NULL;
  return temp;
}
void Song::set_allocated_time_sig(::Singul::TimeSignature* time_sig) {
  delete time_sig_;
  time_sig_ = time_sig;
  if (time_sig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Singul.Song.time_sig)
}

// int32 tpqn = 11;
void Song::clear_tpqn() {
  tpqn_ = 0;
}
::google::protobuf::int32 Song::tpqn() const {
  // @@protoc_insertion_point(field_get:Singul.Song.tpqn)
  return tpqn_;
}
void Song::set_tpqn(::google::protobuf::int32 value) {
  
  tpqn_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.tpqn)
}

// int32 count_in = 12;
void Song::clear_count_in() {
  count_in_ = 0;
}
::google::protobuf::int32 Song::count_in() const {
  // @@protoc_insertion_point(field_get:Singul.Song.count_in)
  return count_in_;
}
void Song::set_count_in(::google::protobuf::int32 value) {
  
  count_in_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.count_in)
}

// bool mode_2x2_enabled = 13;
void Song::clear_mode_2x2_enabled() {
  mode_2x2_enabled_ = false;
}
bool Song::mode_2x2_enabled() const {
  // @@protoc_insertion_point(field_get:Singul.Song.mode_2x2_enabled)
  return mode_2x2_enabled_;
}
void Song::set_mode_2x2_enabled(bool value) {
  
  mode_2x2_enabled_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.mode_2x2_enabled)
}

// bool quantize_track_enabled = 14;
void Song::clear_quantize_track_enabled() {
  quantize_track_enabled_ = false;
}
bool Song::quantize_track_enabled() const {
  // @@protoc_insertion_point(field_get:Singul.Song.quantize_track_enabled)
  return quantize_track_enabled_;
}
void Song::set_quantize_track_enabled(bool value) {
  
  quantize_track_enabled_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.quantize_track_enabled)
}

// int32 order_index = 16;
void Song::clear_order_index() {
  order_index_ = 0;
}
::google::protobuf::int32 Song::order_index() const {
  // @@protoc_insertion_point(field_get:Singul.Song.order_index)
  return order_index_;
}
void Song::set_order_index(::google::protobuf::int32 value) {
  
  order_index_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.order_index)
}

// bool stereo = 18;
void Song::clear_stereo() {
  stereo_ = false;
}
bool Song::stereo() const {
  // @@protoc_insertion_point(field_get:Singul.Song.stereo)
  return stereo_;
}
void Song::set_stereo(bool value) {
  
  stereo_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.stereo)
}

// int32 sync_tracks_option = 19;
void Song::clear_sync_tracks_option() {
  sync_tracks_option_ = 0;
}
::google::protobuf::int32 Song::sync_tracks_option() const {
  // @@protoc_insertion_point(field_get:Singul.Song.sync_tracks_option)
  return sync_tracks_option_;
}
void Song::set_sync_tracks_option(::google::protobuf::int32 value) {
  
  sync_tracks_option_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.sync_tracks_option)
}

// repeated bool locked = 20;
int Song::locked_size() const {
  return locked_.size();
}
void Song::clear_locked() {
  locked_.Clear();
}
bool Song::locked(int index) const {
  // @@protoc_insertion_point(field_get:Singul.Song.locked)
  return locked_.Get(index);
}
void Song::set_locked(int index, bool value) {
  locked_.Set(index, value);
  // @@protoc_insertion_point(field_set:Singul.Song.locked)
}
void Song::add_locked(bool value) {
  locked_.Add(value);
  // @@protoc_insertion_point(field_add:Singul.Song.locked)
}
const ::google::protobuf::RepeatedField< bool >&
Song::locked() const {
  // @@protoc_insertion_point(field_list:Singul.Song.locked)
  return locked_;
}
::google::protobuf::RepeatedField< bool >*
Song::mutable_locked() {
  // @@protoc_insertion_point(field_mutable_list:Singul.Song.locked)
  return &locked_;
}

// bool midi_select_enabled = 21;
void Song::clear_midi_select_enabled() {
  midi_select_enabled_ = false;
}
bool Song::midi_select_enabled() const {
  // @@protoc_insertion_point(field_get:Singul.Song.midi_select_enabled)
  return midi_select_enabled_;
}
void Song::set_midi_select_enabled(bool value) {
  
  midi_select_enabled_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.midi_select_enabled)
}

// int32 midi_bank_msb = 22;
void Song::clear_midi_bank_msb() {
  midi_bank_msb_ = 0;
}
::google::protobuf::int32 Song::midi_bank_msb() const {
  // @@protoc_insertion_point(field_get:Singul.Song.midi_bank_msb)
  return midi_bank_msb_;
}
void Song::set_midi_bank_msb(::google::protobuf::int32 value) {
  
  midi_bank_msb_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.midi_bank_msb)
}

// int32 midi_program_number = 23;
void Song::clear_midi_program_number() {
  midi_program_number_ = 0;
}
::google::protobuf::int32 Song::midi_program_number() const {
  // @@protoc_insertion_point(field_get:Singul.Song.midi_program_number)
  return midi_program_number_;
}
void Song::set_midi_program_number(::google::protobuf::int32 value) {
  
  midi_program_number_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.midi_program_number)
}

// string os_version = 97;
void Song::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Song::os_version() const {
  // @@protoc_insertion_point(field_get:Singul.Song.os_version)
  return os_version_.GetNoArena();
}
void Song::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Singul.Song.os_version)
}
#if LANG_CXX11
void Song::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Singul.Song.os_version)
}
#endif
void Song::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Singul.Song.os_version)
}
void Song::set_os_version(const char* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Singul.Song.os_version)
}
::std::string* Song::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:Singul.Song.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Song::release_os_version() {
  // @@protoc_insertion_point(field_release:Singul.Song.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Song::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:Singul.Song.os_version)
}

// int32 meta_version = 98;
void Song::clear_meta_version() {
  meta_version_ = 0;
}
::google::protobuf::int32 Song::meta_version() const {
  // @@protoc_insertion_point(field_get:Singul.Song.meta_version)
  return meta_version_;
}
void Song::set_meta_version(::google::protobuf::int32 value) {
  
  meta_version_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.meta_version)
}

// repeated .Singul.Part parts = 99;
int Song::parts_size() const {
  return parts_.size();
}
void Song::clear_parts() {
  parts_.Clear();
}
const ::Singul::Part& Song::parts(int index) const {
  // @@protoc_insertion_point(field_get:Singul.Song.parts)
  return parts_.Get(index);
}
::Singul::Part* Song::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:Singul.Song.parts)
  return parts_.Mutable(index);
}
::Singul::Part* Song::add_parts() {
  // @@protoc_insertion_point(field_add:Singul.Song.parts)
  return parts_.Add();
}
::google::protobuf::RepeatedPtrField< ::Singul::Part >*
Song::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:Singul.Song.parts)
  return &parts_;
}
const ::google::protobuf::RepeatedPtrField< ::Singul::Part >&
Song::parts() const {
  // @@protoc_insertion_point(field_list:Singul.Song.parts)
  return parts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Part::kTracksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Part::Part()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_song_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Singul.Part)
}
Part::Part(const Part& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      tracks_(from.tracks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Singul.Part)
}

void Part::SharedCtor() {
  _cached_size_ = 0;
}

Part::~Part() {
  // @@protoc_insertion_point(destructor:Singul.Part)
  SharedDtor();
}

void Part::SharedDtor() {
}

void Part::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Part& Part::default_instance() {
  protobuf_song_2eproto::InitDefaults();
  return *internal_default_instance();
}

Part* Part::New(::google::protobuf::Arena* arena) const {
  Part* n = new Part;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Part::Clear() {
// @@protoc_insertion_point(message_clear_start:Singul.Part)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  _internal_metadata_.Clear();
}

bool Part::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Singul.Part)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Singul.Track tracks = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Singul.Part)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Singul.Part)
  return false;
#undef DO_
}

void Part::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Singul.Part)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Singul.Track tracks = 99;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      99, this->tracks(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Singul.Part)
}

size_t Part::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Singul.Part)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .Singul.Track tracks = 99;
  {
    unsigned int count = static_cast<unsigned int>(this->tracks_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Part::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Part*>(&from));
}

void Part::MergeFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Singul.Part)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
}

void Part::CopyFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Singul.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part::IsInitialized() const {
  return true;
}

void Part::Swap(Part* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Part::InternalSwap(Part* other) {
  using std::swap;
  tracks_.InternalSwap(&other->tracks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Part::GetTypeName() const {
  return "Singul.Part";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Part

// repeated .Singul.Track tracks = 99;
int Part::tracks_size() const {
  return tracks_.size();
}
void Part::clear_tracks() {
  tracks_.Clear();
}
const ::Singul::Track& Part::tracks(int index) const {
  // @@protoc_insertion_point(field_get:Singul.Part.tracks)
  return tracks_.Get(index);
}
::Singul::Track* Part::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:Singul.Part.tracks)
  return tracks_.Mutable(index);
}
::Singul::Track* Part::add_tracks() {
  // @@protoc_insertion_point(field_add:Singul.Part.tracks)
  return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::Singul::Track >*
Part::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:Singul.Part.tracks)
  return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::Singul::Track >&
Part::tracks() const {
  // @@protoc_insertion_point(field_list:Singul.Part.tracks)
  return tracks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Track::kVolumeFieldNumber;
const int Track::kMutedFieldNumber;
const int Track::kNumberOfTickFieldNumber;
const int Track::kTickOffsetFieldNumber;
const int Track::kLoopAFieldNumber;
const int Track::kLoopBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Track::Track()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_song_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Singul.Track)
}
Track::Track(const Track& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_loop_a()) {
    loop_a_ = new ::Singul::AudioLoop(*from.loop_a_);
  } else {
    loop_a_ = NULL;
  }
  if (from.has_loop_b()) {
    loop_b_ = new ::Singul::AudioLoop(*from.loop_b_);
  } else {
    loop_b_ = NULL;
  }
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_offset_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(tick_offset_));
  // @@protoc_insertion_point(copy_constructor:Singul.Track)
}

void Track::SharedCtor() {
  ::memset(&loop_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_offset_) -
      reinterpret_cast<char*>(&loop_a_)) + sizeof(tick_offset_));
  _cached_size_ = 0;
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:Singul.Track)
  SharedDtor();
}

void Track::SharedDtor() {
  if (this != internal_default_instance()) delete loop_a_;
  if (this != internal_default_instance()) delete loop_b_;
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Track& Track::default_instance() {
  protobuf_song_2eproto::InitDefaults();
  return *internal_default_instance();
}

Track* Track::New(::google::protobuf::Arena* arena) const {
  Track* n = new Track;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:Singul.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && loop_a_ != NULL) {
    delete loop_a_;
  }
  loop_a_ = NULL;
  if (GetArenaNoVirtual() == NULL && loop_b_ != NULL) {
    delete loop_b_;
  }
  loop_b_ = NULL;
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_offset_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(tick_offset_));
  _internal_metadata_.Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Singul.Track)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 volume = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool muted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_of_tick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tick_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Singul.AudioLoop loop_a = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Singul.AudioLoop loop_b = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Singul.Track)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Singul.Track)
  return false;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Singul.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 volume = 1;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->volume(), output);
  }

  // bool muted = 2;
  if (this->muted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->muted(), output);
  }

  // int32 number_of_tick = 3;
  if (this->number_of_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number_of_tick(), output);
  }

  // int32 tick_offset = 4;
  if (this->tick_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tick_offset(), output);
  }

  // .Singul.AudioLoop loop_a = 10;
  if (this->has_loop_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->loop_a_, output);
  }

  // .Singul.AudioLoop loop_b = 11;
  if (this->has_loop_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->loop_b_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Singul.Track)
}

size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Singul.Track)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Singul.AudioLoop loop_a = 10;
  if (this->has_loop_a()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loop_a_);
  }

  // .Singul.AudioLoop loop_b = 11;
  if (this->has_loop_b()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loop_b_);
  }

  // int32 volume = 1;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // bool muted = 2;
  if (this->muted() != 0) {
    total_size += 1 + 1;
  }

  // int32 number_of_tick = 3;
  if (this->number_of_tick() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_tick());
  }

  // int32 tick_offset = 4;
  if (this->tick_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tick_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Track*>(&from));
}

void Track::MergeFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Singul.Track)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_loop_a()) {
    mutable_loop_a()->::Singul::AudioLoop::MergeFrom(from.loop_a());
  }
  if (from.has_loop_b()) {
    mutable_loop_b()->::Singul::AudioLoop::MergeFrom(from.loop_b());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.muted() != 0) {
    set_muted(from.muted());
  }
  if (from.number_of_tick() != 0) {
    set_number_of_tick(from.number_of_tick());
  }
  if (from.tick_offset() != 0) {
    set_tick_offset(from.tick_offset());
  }
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Singul.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  return true;
}

void Track::Swap(Track* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Track::InternalSwap(Track* other) {
  using std::swap;
  swap(loop_a_, other->loop_a_);
  swap(loop_b_, other->loop_b_);
  swap(volume_, other->volume_);
  swap(muted_, other->muted_);
  swap(number_of_tick_, other->number_of_tick_);
  swap(tick_offset_, other->tick_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Track::GetTypeName() const {
  return "Singul.Track";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Track

// int32 volume = 1;
void Track::clear_volume() {
  volume_ = 0;
}
::google::protobuf::int32 Track::volume() const {
  // @@protoc_insertion_point(field_get:Singul.Track.volume)
  return volume_;
}
void Track::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:Singul.Track.volume)
}

// bool muted = 2;
void Track::clear_muted() {
  muted_ = false;
}
bool Track::muted() const {
  // @@protoc_insertion_point(field_get:Singul.Track.muted)
  return muted_;
}
void Track::set_muted(bool value) {
  
  muted_ = value;
  // @@protoc_insertion_point(field_set:Singul.Track.muted)
}

// int32 number_of_tick = 3;
void Track::clear_number_of_tick() {
  number_of_tick_ = 0;
}
::google::protobuf::int32 Track::number_of_tick() const {
  // @@protoc_insertion_point(field_get:Singul.Track.number_of_tick)
  return number_of_tick_;
}
void Track::set_number_of_tick(::google::protobuf::int32 value) {
  
  number_of_tick_ = value;
  // @@protoc_insertion_point(field_set:Singul.Track.number_of_tick)
}

// int32 tick_offset = 4;
void Track::clear_tick_offset() {
  tick_offset_ = 0;
}
::google::protobuf::int32 Track::tick_offset() const {
  // @@protoc_insertion_point(field_get:Singul.Track.tick_offset)
  return tick_offset_;
}
void Track::set_tick_offset(::google::protobuf::int32 value) {
  
  tick_offset_ = value;
  // @@protoc_insertion_point(field_set:Singul.Track.tick_offset)
}

// .Singul.AudioLoop loop_a = 10;
bool Track::has_loop_a() const {
  return this != internal_default_instance() && loop_a_ != NULL;
}
void Track::clear_loop_a() {
  if (GetArenaNoVirtual() == NULL && loop_a_ != NULL) delete loop_a_;
  loop_a_ = NULL;
}
const ::Singul::AudioLoop& Track::loop_a() const {
  const ::Singul::AudioLoop* p = loop_a_;
  // @@protoc_insertion_point(field_get:Singul.Track.loop_a)
  return p != NULL ? *p : *reinterpret_cast<const ::Singul::AudioLoop*>(
      &::Singul::_AudioLoop_default_instance_);
}
::Singul::AudioLoop* Track::mutable_loop_a() {
  
  if (loop_a_ == NULL) {
    loop_a_ = new ::Singul::AudioLoop;
  }
  // @@protoc_insertion_point(field_mutable:Singul.Track.loop_a)
  return loop_a_;
}
::Singul::AudioLoop* Track::release_loop_a() {
  // @@protoc_insertion_point(field_release:Singul.Track.loop_a)
  
  ::Singul::AudioLoop* temp = loop_a_;
  loop_a_ = NULL;
  return temp;
}
void Track::set_allocated_loop_a(::Singul::AudioLoop* loop_a) {
  delete loop_a_;
  loop_a_ = loop_a;
  if (loop_a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Singul.Track.loop_a)
}

// .Singul.AudioLoop loop_b = 11;
bool Track::has_loop_b() const {
  return this != internal_default_instance() && loop_b_ != NULL;
}
void Track::clear_loop_b() {
  if (GetArenaNoVirtual() == NULL && loop_b_ != NULL) delete loop_b_;
  loop_b_ = NULL;
}
const ::Singul::AudioLoop& Track::loop_b() const {
  const ::Singul::AudioLoop* p = loop_b_;
  // @@protoc_insertion_point(field_get:Singul.Track.loop_b)
  return p != NULL ? *p : *reinterpret_cast<const ::Singul::AudioLoop*>(
      &::Singul::_AudioLoop_default_instance_);
}
::Singul::AudioLoop* Track::mutable_loop_b() {
  
  if (loop_b_ == NULL) {
    loop_b_ = new ::Singul::AudioLoop;
  }
  // @@protoc_insertion_point(field_mutable:Singul.Track.loop_b)
  return loop_b_;
}
::Singul::AudioLoop* Track::release_loop_b() {
  // @@protoc_insertion_point(field_release:Singul.Track.loop_b)
  
  ::Singul::AudioLoop* temp = loop_b_;
  loop_b_ = NULL;
  return temp;
}
void Track::set_allocated_loop_b(::Singul::AudioLoop* loop_b) {
  delete loop_b_;
  loop_b_ = loop_b;
  if (loop_b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Singul.Track.loop_b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioLoop::kNumberOfFramesFieldNumber;
const int AudioLoop::kFilenameFieldNumber;
const int AudioLoop::kUndoFieldNumber;
const int AudioLoop::kVisualGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioLoop::AudioLoop()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_song_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Singul.AudioLoop)
}
AudioLoop::AudioLoop(const AudioLoop& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&number_of_frames_, &from.number_of_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&visual_gain_) -
    reinterpret_cast<char*>(&number_of_frames_)) + sizeof(visual_gain_));
  // @@protoc_insertion_point(copy_constructor:Singul.AudioLoop)
}

void AudioLoop::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_of_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visual_gain_) -
      reinterpret_cast<char*>(&number_of_frames_)) + sizeof(visual_gain_));
  _cached_size_ = 0;
}

AudioLoop::~AudioLoop() {
  // @@protoc_insertion_point(destructor:Singul.AudioLoop)
  SharedDtor();
}

void AudioLoop::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioLoop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioLoop& AudioLoop::default_instance() {
  protobuf_song_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioLoop* AudioLoop::New(::google::protobuf::Arena* arena) const {
  AudioLoop* n = new AudioLoop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioLoop::Clear() {
// @@protoc_insertion_point(message_clear_start:Singul.AudioLoop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_of_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visual_gain_) -
      reinterpret_cast<char*>(&number_of_frames_)) + sizeof(visual_gain_));
  _internal_metadata_.Clear();
}

bool AudioLoop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Singul.AudioLoop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 number_of_frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Singul.AudioLoop.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool undo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &undo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float visual_gain = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &visual_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Singul.AudioLoop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Singul.AudioLoop)
  return false;
#undef DO_
}

void AudioLoop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Singul.AudioLoop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number_of_frames = 1;
  if (this->number_of_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number_of_frames(), output);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Singul.AudioLoop.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // bool undo = 3;
  if (this->undo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->undo(), output);
  }

  // float visual_gain = 10;
  if (this->visual_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->visual_gain(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Singul.AudioLoop)
}

size_t AudioLoop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Singul.AudioLoop)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // int32 number_of_frames = 1;
  if (this->number_of_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_frames());
  }

  // bool undo = 3;
  if (this->undo() != 0) {
    total_size += 1 + 1;
  }

  // float visual_gain = 10;
  if (this->visual_gain() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioLoop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioLoop*>(&from));
}

void AudioLoop::MergeFrom(const AudioLoop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Singul.AudioLoop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.number_of_frames() != 0) {
    set_number_of_frames(from.number_of_frames());
  }
  if (from.undo() != 0) {
    set_undo(from.undo());
  }
  if (from.visual_gain() != 0) {
    set_visual_gain(from.visual_gain());
  }
}

void AudioLoop::CopyFrom(const AudioLoop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Singul.AudioLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioLoop::IsInitialized() const {
  return true;
}

void AudioLoop::Swap(AudioLoop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioLoop::InternalSwap(AudioLoop* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  swap(number_of_frames_, other->number_of_frames_);
  swap(undo_, other->undo_);
  swap(visual_gain_, other->visual_gain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string AudioLoop::GetTypeName() const {
  return "Singul.AudioLoop";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioLoop

// int32 number_of_frames = 1;
void AudioLoop::clear_number_of_frames() {
  number_of_frames_ = 0;
}
::google::protobuf::int32 AudioLoop::number_of_frames() const {
  // @@protoc_insertion_point(field_get:Singul.AudioLoop.number_of_frames)
  return number_of_frames_;
}
void AudioLoop::set_number_of_frames(::google::protobuf::int32 value) {
  
  number_of_frames_ = value;
  // @@protoc_insertion_point(field_set:Singul.AudioLoop.number_of_frames)
}

// string filename = 2;
void AudioLoop::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioLoop::filename() const {
  // @@protoc_insertion_point(field_get:Singul.AudioLoop.filename)
  return filename_.GetNoArena();
}
void AudioLoop::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Singul.AudioLoop.filename)
}
#if LANG_CXX11
void AudioLoop::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Singul.AudioLoop.filename)
}
#endif
void AudioLoop::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Singul.AudioLoop.filename)
}
void AudioLoop::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Singul.AudioLoop.filename)
}
::std::string* AudioLoop::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:Singul.AudioLoop.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioLoop::release_filename() {
  // @@protoc_insertion_point(field_release:Singul.AudioLoop.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioLoop::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Singul.AudioLoop.filename)
}

// bool undo = 3;
void AudioLoop::clear_undo() {
  undo_ = false;
}
bool AudioLoop::undo() const {
  // @@protoc_insertion_point(field_get:Singul.AudioLoop.undo)
  return undo_;
}
void AudioLoop::set_undo(bool value) {
  
  undo_ = value;
  // @@protoc_insertion_point(field_set:Singul.AudioLoop.undo)
}

// float visual_gain = 10;
void AudioLoop::clear_visual_gain() {
  visual_gain_ = 0;
}
float AudioLoop::visual_gain() const {
  // @@protoc_insertion_point(field_get:Singul.AudioLoop.visual_gain)
  return visual_gain_;
}
void AudioLoop::set_visual_gain(float value) {
  
  visual_gain_ = value;
  // @@protoc_insertion_point(field_set:Singul.AudioLoop.visual_gain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSignature::kNumeratorFieldNumber;
const int TimeSignature::kDenonimatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSignature::TimeSignature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_song_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Singul.TimeSignature)
}
TimeSignature::TimeSignature(const TimeSignature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&numerator_, &from.numerator_,
    static_cast<size_t>(reinterpret_cast<char*>(&denonimator_) -
    reinterpret_cast<char*>(&numerator_)) + sizeof(denonimator_));
  // @@protoc_insertion_point(copy_constructor:Singul.TimeSignature)
}

void TimeSignature::SharedCtor() {
  ::memset(&numerator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denonimator_) -
      reinterpret_cast<char*>(&numerator_)) + sizeof(denonimator_));
  _cached_size_ = 0;
}

TimeSignature::~TimeSignature() {
  // @@protoc_insertion_point(destructor:Singul.TimeSignature)
  SharedDtor();
}

void TimeSignature::SharedDtor() {
}

void TimeSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeSignature& TimeSignature::default_instance() {
  protobuf_song_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeSignature* TimeSignature::New(::google::protobuf::Arena* arena) const {
  TimeSignature* n = new TimeSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:Singul.TimeSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&numerator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denonimator_) -
      reinterpret_cast<char*>(&numerator_)) + sizeof(denonimator_));
  _internal_metadata_.Clear();
}

bool TimeSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Singul.TimeSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 numerator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numerator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 denonimator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &denonimator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Singul.TimeSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Singul.TimeSignature)
  return false;
#undef DO_
}

void TimeSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Singul.TimeSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 numerator = 1;
  if (this->numerator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numerator(), output);
  }

  // int32 denonimator = 2;
  if (this->denonimator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->denonimator(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Singul.TimeSignature)
}

size_t TimeSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Singul.TimeSignature)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int32 numerator = 1;
  if (this->numerator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numerator());
  }

  // int32 denonimator = 2;
  if (this->denonimator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->denonimator());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSignature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeSignature*>(&from));
}

void TimeSignature::MergeFrom(const TimeSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Singul.TimeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.numerator() != 0) {
    set_numerator(from.numerator());
  }
  if (from.denonimator() != 0) {
    set_denonimator(from.denonimator());
  }
}

void TimeSignature::CopyFrom(const TimeSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Singul.TimeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSignature::IsInitialized() const {
  return true;
}

void TimeSignature::Swap(TimeSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSignature::InternalSwap(TimeSignature* other) {
  using std::swap;
  swap(numerator_, other->numerator_);
  swap(denonimator_, other->denonimator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TimeSignature::GetTypeName() const {
  return "Singul.TimeSignature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSignature

// int32 numerator = 1;
void TimeSignature::clear_numerator() {
  numerator_ = 0;
}
::google::protobuf::int32 TimeSignature::numerator() const {
  // @@protoc_insertion_point(field_get:Singul.TimeSignature.numerator)
  return numerator_;
}
void TimeSignature::set_numerator(::google::protobuf::int32 value) {
  
  numerator_ = value;
  // @@protoc_insertion_point(field_set:Singul.TimeSignature.numerator)
}

// int32 denonimator = 2;
void TimeSignature::clear_denonimator() {
  denonimator_ = 0;
}
::google::protobuf::int32 TimeSignature::denonimator() const {
  // @@protoc_insertion_point(field_get:Singul.TimeSignature.denonimator)
  return denonimator_;
}
void TimeSignature::set_denonimator(::google::protobuf::int32 value) {
  
  denonimator_ = value;
  // @@protoc_insertion_point(field_set:Singul.TimeSignature.denonimator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Singul

// @@protoc_insertion_point(global_scope)

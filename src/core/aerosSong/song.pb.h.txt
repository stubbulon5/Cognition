// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: song.proto

#ifndef PROTOBUF_song_2eproto__INCLUDED
#define PROTOBUF_song_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace Singul {
class AudioLoop;
class AudioLoopDefaultTypeInternal;
extern AudioLoopDefaultTypeInternal _AudioLoop_default_instance_;
class Part;
class PartDefaultTypeInternal;
extern PartDefaultTypeInternal _Part_default_instance_;
class Song;
class SongDefaultTypeInternal;
extern SongDefaultTypeInternal _Song_default_instance_;
class TimeSignature;
class TimeSignatureDefaultTypeInternal;
extern TimeSignatureDefaultTypeInternal _TimeSignature_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
}  // namespace Singul

namespace Singul {

namespace protobuf_song_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_song_2eproto

// ===================================================================

class Song : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Singul.Song) */ {
 public:
  Song();
  virtual ~Song();

  Song(const Song& from);

  inline Song& operator=(const Song& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Song(Song&& from) noexcept
    : Song() {
    *this = ::std::move(from);
  }

  inline Song& operator=(Song&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Song& default_instance();

  static inline const Song* internal_default_instance() {
    return reinterpret_cast<const Song*>(
               &_Song_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Song* other);
  friend void swap(Song& a, Song& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Song* New() const PROTOBUF_FINAL { return New(NULL); }

  Song* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Song& from);
  void MergeFrom(const Song& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Song* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool locked = 20;
  int locked_size() const;
  void clear_locked();
  static const int kLockedFieldNumber = 20;
  bool locked(int index) const;
  void set_locked(int index, bool value);
  void add_locked(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      locked() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_locked();

  // repeated .Singul.Part parts = 99;
  int parts_size() const;
  void clear_parts();
  static const int kPartsFieldNumber = 99;
  const ::Singul::Part& parts(int index) const;
  ::Singul::Part* mutable_parts(int index);
  ::Singul::Part* add_parts();
  ::google::protobuf::RepeatedPtrField< ::Singul::Part >*
      mutable_parts();
  const ::google::protobuf::RepeatedPtrField< ::Singul::Part >&
      parts() const;

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string os_version = 97;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 97;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // .Singul.TimeSignature time_sig = 3;
  bool has_time_sig() const;
  void clear_time_sig();
  static const int kTimeSigFieldNumber = 3;
  const ::Singul::TimeSignature& time_sig() const;
  ::Singul::TimeSignature* mutable_time_sig();
  ::Singul::TimeSignature* release_time_sig();
  void set_allocated_time_sig(::Singul::TimeSignature* time_sig);

  // float bpm = 2;
  void clear_bpm();
  static const int kBpmFieldNumber = 2;
  float bpm() const;
  void set_bpm(float value);

  // int32 tpqn = 11;
  void clear_tpqn();
  static const int kTpqnFieldNumber = 11;
  ::google::protobuf::int32 tpqn() const;
  void set_tpqn(::google::protobuf::int32 value);

  // int32 count_in = 12;
  void clear_count_in();
  static const int kCountInFieldNumber = 12;
  ::google::protobuf::int32 count_in() const;
  void set_count_in(::google::protobuf::int32 value);

  // int32 order_index = 16;
  void clear_order_index();
  static const int kOrderIndexFieldNumber = 16;
  ::google::protobuf::int32 order_index() const;
  void set_order_index(::google::protobuf::int32 value);

  // bool mode_2x2_enabled = 13;
  void clear_mode_2x2_enabled();
  static const int kMode2X2EnabledFieldNumber = 13;
  bool mode_2x2_enabled() const;
  void set_mode_2x2_enabled(bool value);

  // bool quantize_track_enabled = 14;
  void clear_quantize_track_enabled();
  static const int kQuantizeTrackEnabledFieldNumber = 14;
  bool quantize_track_enabled() const;
  void set_quantize_track_enabled(bool value);

  // bool stereo = 18;
  void clear_stereo();
  static const int kStereoFieldNumber = 18;
  bool stereo() const;
  void set_stereo(bool value);

  // bool midi_select_enabled = 21;
  void clear_midi_select_enabled();
  static const int kMidiSelectEnabledFieldNumber = 21;
  bool midi_select_enabled() const;
  void set_midi_select_enabled(bool value);

  // int32 sync_tracks_option = 19;
  void clear_sync_tracks_option();
  static const int kSyncTracksOptionFieldNumber = 19;
  ::google::protobuf::int32 sync_tracks_option() const;
  void set_sync_tracks_option(::google::protobuf::int32 value);

  // int32 meta_version = 98;
  void clear_meta_version();
  static const int kMetaVersionFieldNumber = 98;
  ::google::protobuf::int32 meta_version() const;
  void set_meta_version(::google::protobuf::int32 value);

  // int32 midi_bank_msb = 22;
  void clear_midi_bank_msb();
  static const int kMidiBankMsbFieldNumber = 22;
  ::google::protobuf::int32 midi_bank_msb() const;
  void set_midi_bank_msb(::google::protobuf::int32 value);

  // int32 midi_program_number = 23;
  void clear_midi_program_number();
  static const int kMidiProgramNumberFieldNumber = 23;
  ::google::protobuf::int32 midi_program_number() const;
  void set_midi_program_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Singul.Song)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< bool > locked_;
  mutable int _locked_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Singul::Part > parts_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::Singul::TimeSignature* time_sig_;
  float bpm_;
  ::google::protobuf::int32 tpqn_;
  ::google::protobuf::int32 count_in_;
  ::google::protobuf::int32 order_index_;
  bool mode_2x2_enabled_;
  bool quantize_track_enabled_;
  bool stereo_;
  bool midi_select_enabled_;
  ::google::protobuf::int32 sync_tracks_option_;
  ::google::protobuf::int32 meta_version_;
  ::google::protobuf::int32 midi_bank_msb_;
  ::google::protobuf::int32 midi_program_number_;
  mutable int _cached_size_;
  friend struct protobuf_song_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Part : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Singul.Part) */ {
 public:
  Part();
  virtual ~Part();

  Part(const Part& from);

  inline Part& operator=(const Part& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Part(Part&& from) noexcept
    : Part() {
    *this = ::std::move(from);
  }

  inline Part& operator=(Part&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Part& default_instance();

  static inline const Part* internal_default_instance() {
    return reinterpret_cast<const Part*>(
               &_Part_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Part* other);
  friend void swap(Part& a, Part& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Part* New() const PROTOBUF_FINAL { return New(NULL); }

  Part* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Part& from);
  void MergeFrom(const Part& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Part* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Singul.Track tracks = 99;
  int tracks_size() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 99;
  const ::Singul::Track& tracks(int index) const;
  ::Singul::Track* mutable_tracks(int index);
  ::Singul::Track* add_tracks();
  ::google::protobuf::RepeatedPtrField< ::Singul::Track >*
      mutable_tracks();
  const ::google::protobuf::RepeatedPtrField< ::Singul::Track >&
      tracks() const;

  // @@protoc_insertion_point(class_scope:Singul.Part)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Singul::Track > tracks_;
  mutable int _cached_size_;
  friend struct protobuf_song_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Track : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Singul.Track) */ {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(Track&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Track& default_instance();

  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Track* other);
  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const PROTOBUF_FINAL { return New(NULL); }

  Track* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Track* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Singul.AudioLoop loop_a = 10;
  bool has_loop_a() const;
  void clear_loop_a();
  static const int kLoopAFieldNumber = 10;
  const ::Singul::AudioLoop& loop_a() const;
  ::Singul::AudioLoop* mutable_loop_a();
  ::Singul::AudioLoop* release_loop_a();
  void set_allocated_loop_a(::Singul::AudioLoop* loop_a);

  // .Singul.AudioLoop loop_b = 11;
  bool has_loop_b() const;
  void clear_loop_b();
  static const int kLoopBFieldNumber = 11;
  const ::Singul::AudioLoop& loop_b() const;
  ::Singul::AudioLoop* mutable_loop_b();
  ::Singul::AudioLoop* release_loop_b();
  void set_allocated_loop_b(::Singul::AudioLoop* loop_b);

  // int32 volume = 1;
  void clear_volume();
  static const int kVolumeFieldNumber = 1;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // bool muted = 2;
  void clear_muted();
  static const int kMutedFieldNumber = 2;
  bool muted() const;
  void set_muted(bool value);

  // int32 number_of_tick = 3;
  void clear_number_of_tick();
  static const int kNumberOfTickFieldNumber = 3;
  ::google::protobuf::int32 number_of_tick() const;
  void set_number_of_tick(::google::protobuf::int32 value);

  // int32 tick_offset = 4;
  void clear_tick_offset();
  static const int kTickOffsetFieldNumber = 4;
  ::google::protobuf::int32 tick_offset() const;
  void set_tick_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Singul.Track)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Singul::AudioLoop* loop_a_;
  ::Singul::AudioLoop* loop_b_;
  ::google::protobuf::int32 volume_;
  bool muted_;
  ::google::protobuf::int32 number_of_tick_;
  ::google::protobuf::int32 tick_offset_;
  mutable int _cached_size_;
  friend struct protobuf_song_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioLoop : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Singul.AudioLoop) */ {
 public:
  AudioLoop();
  virtual ~AudioLoop();

  AudioLoop(const AudioLoop& from);

  inline AudioLoop& operator=(const AudioLoop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioLoop(AudioLoop&& from) noexcept
    : AudioLoop() {
    *this = ::std::move(from);
  }

  inline AudioLoop& operator=(AudioLoop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AudioLoop& default_instance();

  static inline const AudioLoop* internal_default_instance() {
    return reinterpret_cast<const AudioLoop*>(
               &_AudioLoop_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AudioLoop* other);
  friend void swap(AudioLoop& a, AudioLoop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioLoop* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioLoop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AudioLoop& from);
  void MergeFrom(const AudioLoop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioLoop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // int32 number_of_frames = 1;
  void clear_number_of_frames();
  static const int kNumberOfFramesFieldNumber = 1;
  ::google::protobuf::int32 number_of_frames() const;
  void set_number_of_frames(::google::protobuf::int32 value);

  // bool undo = 3;
  void clear_undo();
  static const int kUndoFieldNumber = 3;
  bool undo() const;
  void set_undo(bool value);

  // float visual_gain = 10;
  void clear_visual_gain();
  static const int kVisualGainFieldNumber = 10;
  float visual_gain() const;
  void set_visual_gain(float value);

  // @@protoc_insertion_point(class_scope:Singul.AudioLoop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 number_of_frames_;
  bool undo_;
  float visual_gain_;
  mutable int _cached_size_;
  friend struct protobuf_song_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeSignature : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Singul.TimeSignature) */ {
 public:
  TimeSignature();
  virtual ~TimeSignature();

  TimeSignature(const TimeSignature& from);

  inline TimeSignature& operator=(const TimeSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeSignature(TimeSignature&& from) noexcept
    : TimeSignature() {
    *this = ::std::move(from);
  }

  inline TimeSignature& operator=(TimeSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TimeSignature& default_instance();

  static inline const TimeSignature* internal_default_instance() {
    return reinterpret_cast<const TimeSignature*>(
               &_TimeSignature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TimeSignature* other);
  friend void swap(TimeSignature& a, TimeSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeSignature* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeSignature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TimeSignature& from);
  void MergeFrom(const TimeSignature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 numerator = 1;
  void clear_numerator();
  static const int kNumeratorFieldNumber = 1;
  ::google::protobuf::int32 numerator() const;
  void set_numerator(::google::protobuf::int32 value);

  // int32 denonimator = 2;
  void clear_denonimator();
  static const int kDenonimatorFieldNumber = 2;
  ::google::protobuf::int32 denonimator() const;
  void set_denonimator(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Singul.TimeSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 numerator_;
  ::google::protobuf::int32 denonimator_;
  mutable int _cached_size_;
  friend struct protobuf_song_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Song

// string title = 1;
inline void Song::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Song::title() const {
  // @@protoc_insertion_point(field_get:Singul.Song.title)
  return title_.GetNoArena();
}
inline void Song::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Singul.Song.title)
}
#if LANG_CXX11
inline void Song::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Singul.Song.title)
}
#endif
inline void Song::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Singul.Song.title)
}
inline void Song::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Singul.Song.title)
}
inline ::std::string* Song::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:Singul.Song.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Song::release_title() {
  // @@protoc_insertion_point(field_release:Singul.Song.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Song::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:Singul.Song.title)
}

// float bpm = 2;
inline void Song::clear_bpm() {
  bpm_ = 0;
}
inline float Song::bpm() const {
  // @@protoc_insertion_point(field_get:Singul.Song.bpm)
  return bpm_;
}
inline void Song::set_bpm(float value) {
  
  bpm_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.bpm)
}

// .Singul.TimeSignature time_sig = 3;
inline bool Song::has_time_sig() const {
  return this != internal_default_instance() && time_sig_ != NULL;
}
inline void Song::clear_time_sig() {
  if (GetArenaNoVirtual() == NULL && time_sig_ != NULL) delete time_sig_;
  time_sig_ = NULL;
}
inline const ::Singul::TimeSignature& Song::time_sig() const {
  const ::Singul::TimeSignature* p = time_sig_;
  // @@protoc_insertion_point(field_get:Singul.Song.time_sig)
  return p != NULL ? *p : *reinterpret_cast<const ::Singul::TimeSignature*>(
      &::Singul::_TimeSignature_default_instance_);
}
inline ::Singul::TimeSignature* Song::mutable_time_sig() {
  
  if (time_sig_ == NULL) {
    time_sig_ = new ::Singul::TimeSignature;
  }
  // @@protoc_insertion_point(field_mutable:Singul.Song.time_sig)
  return time_sig_;
}
inline ::Singul::TimeSignature* Song::release_time_sig() {
  // @@protoc_insertion_point(field_release:Singul.Song.time_sig)
  
  ::Singul::TimeSignature* temp = time_sig_;
  time_sig_ = NULL;
  return temp;
}
inline void Song::set_allocated_time_sig(::Singul::TimeSignature* time_sig) {
  delete time_sig_;
  time_sig_ = time_sig;
  if (time_sig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Singul.Song.time_sig)
}

// int32 tpqn = 11;
inline void Song::clear_tpqn() {
  tpqn_ = 0;
}
inline ::google::protobuf::int32 Song::tpqn() const {
  // @@protoc_insertion_point(field_get:Singul.Song.tpqn)
  return tpqn_;
}
inline void Song::set_tpqn(::google::protobuf::int32 value) {
  
  tpqn_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.tpqn)
}

// int32 count_in = 12;
inline void Song::clear_count_in() {
  count_in_ = 0;
}
inline ::google::protobuf::int32 Song::count_in() const {
  // @@protoc_insertion_point(field_get:Singul.Song.count_in)
  return count_in_;
}
inline void Song::set_count_in(::google::protobuf::int32 value) {
  
  count_in_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.count_in)
}

// bool mode_2x2_enabled = 13;
inline void Song::clear_mode_2x2_enabled() {
  mode_2x2_enabled_ = false;
}
inline bool Song::mode_2x2_enabled() const {
  // @@protoc_insertion_point(field_get:Singul.Song.mode_2x2_enabled)
  return mode_2x2_enabled_;
}
inline void Song::set_mode_2x2_enabled(bool value) {
  
  mode_2x2_enabled_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.mode_2x2_enabled)
}

// bool quantize_track_enabled = 14;
inline void Song::clear_quantize_track_enabled() {
  quantize_track_enabled_ = false;
}
inline bool Song::quantize_track_enabled() const {
  // @@protoc_insertion_point(field_get:Singul.Song.quantize_track_enabled)
  return quantize_track_enabled_;
}
inline void Song::set_quantize_track_enabled(bool value) {
  
  quantize_track_enabled_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.quantize_track_enabled)
}

// int32 order_index = 16;
inline void Song::clear_order_index() {
  order_index_ = 0;
}
inline ::google::protobuf::int32 Song::order_index() const {
  // @@protoc_insertion_point(field_get:Singul.Song.order_index)
  return order_index_;
}
inline void Song::set_order_index(::google::protobuf::int32 value) {
  
  order_index_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.order_index)
}

// bool stereo = 18;
inline void Song::clear_stereo() {
  stereo_ = false;
}
inline bool Song::stereo() const {
  // @@protoc_insertion_point(field_get:Singul.Song.stereo)
  return stereo_;
}
inline void Song::set_stereo(bool value) {
  
  stereo_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.stereo)
}

// int32 sync_tracks_option = 19;
inline void Song::clear_sync_tracks_option() {
  sync_tracks_option_ = 0;
}
inline ::google::protobuf::int32 Song::sync_tracks_option() const {
  // @@protoc_insertion_point(field_get:Singul.Song.sync_tracks_option)
  return sync_tracks_option_;
}
inline void Song::set_sync_tracks_option(::google::protobuf::int32 value) {
  
  sync_tracks_option_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.sync_tracks_option)
}

// repeated bool locked = 20;
inline int Song::locked_size() const {
  return locked_.size();
}
inline void Song::clear_locked() {
  locked_.Clear();
}
inline bool Song::locked(int index) const {
  // @@protoc_insertion_point(field_get:Singul.Song.locked)
  return locked_.Get(index);
}
inline void Song::set_locked(int index, bool value) {
  locked_.Set(index, value);
  // @@protoc_insertion_point(field_set:Singul.Song.locked)
}
inline void Song::add_locked(bool value) {
  locked_.Add(value);
  // @@protoc_insertion_point(field_add:Singul.Song.locked)
}
inline const ::google::protobuf::RepeatedField< bool >&
Song::locked() const {
  // @@protoc_insertion_point(field_list:Singul.Song.locked)
  return locked_;
}
inline ::google::protobuf::RepeatedField< bool >*
Song::mutable_locked() {
  // @@protoc_insertion_point(field_mutable_list:Singul.Song.locked)
  return &locked_;
}

// bool midi_select_enabled = 21;
inline void Song::clear_midi_select_enabled() {
  midi_select_enabled_ = false;
}
inline bool Song::midi_select_enabled() const {
  // @@protoc_insertion_point(field_get:Singul.Song.midi_select_enabled)
  return midi_select_enabled_;
}
inline void Song::set_midi_select_enabled(bool value) {
  
  midi_select_enabled_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.midi_select_enabled)
}

// int32 midi_bank_msb = 22;
inline void Song::clear_midi_bank_msb() {
  midi_bank_msb_ = 0;
}
inline ::google::protobuf::int32 Song::midi_bank_msb() const {
  // @@protoc_insertion_point(field_get:Singul.Song.midi_bank_msb)
  return midi_bank_msb_;
}
inline void Song::set_midi_bank_msb(::google::protobuf::int32 value) {
  
  midi_bank_msb_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.midi_bank_msb)
}

// int32 midi_program_number = 23;
inline void Song::clear_midi_program_number() {
  midi_program_number_ = 0;
}
inline ::google::protobuf::int32 Song::midi_program_number() const {
  // @@protoc_insertion_point(field_get:Singul.Song.midi_program_number)
  return midi_program_number_;
}
inline void Song::set_midi_program_number(::google::protobuf::int32 value) {
  
  midi_program_number_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.midi_program_number)
}

// string os_version = 97;
inline void Song::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Song::os_version() const {
  // @@protoc_insertion_point(field_get:Singul.Song.os_version)
  return os_version_.GetNoArena();
}
inline void Song::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Singul.Song.os_version)
}
#if LANG_CXX11
inline void Song::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Singul.Song.os_version)
}
#endif
inline void Song::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Singul.Song.os_version)
}
inline void Song::set_os_version(const char* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Singul.Song.os_version)
}
inline ::std::string* Song::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:Singul.Song.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Song::release_os_version() {
  // @@protoc_insertion_point(field_release:Singul.Song.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Song::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:Singul.Song.os_version)
}

// int32 meta_version = 98;
inline void Song::clear_meta_version() {
  meta_version_ = 0;
}
inline ::google::protobuf::int32 Song::meta_version() const {
  // @@protoc_insertion_point(field_get:Singul.Song.meta_version)
  return meta_version_;
}
inline void Song::set_meta_version(::google::protobuf::int32 value) {
  
  meta_version_ = value;
  // @@protoc_insertion_point(field_set:Singul.Song.meta_version)
}

// repeated .Singul.Part parts = 99;
inline int Song::parts_size() const {
  return parts_.size();
}
inline void Song::clear_parts() {
  parts_.Clear();
}
inline const ::Singul::Part& Song::parts(int index) const {
  // @@protoc_insertion_point(field_get:Singul.Song.parts)
  return parts_.Get(index);
}
inline ::Singul::Part* Song::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:Singul.Song.parts)
  return parts_.Mutable(index);
}
inline ::Singul::Part* Song::add_parts() {
  // @@protoc_insertion_point(field_add:Singul.Song.parts)
  return parts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Singul::Part >*
Song::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:Singul.Song.parts)
  return &parts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Singul::Part >&
Song::parts() const {
  // @@protoc_insertion_point(field_list:Singul.Song.parts)
  return parts_;
}

// -------------------------------------------------------------------

// Part

// repeated .Singul.Track tracks = 99;
inline int Part::tracks_size() const {
  return tracks_.size();
}
inline void Part::clear_tracks() {
  tracks_.Clear();
}
inline const ::Singul::Track& Part::tracks(int index) const {
  // @@protoc_insertion_point(field_get:Singul.Part.tracks)
  return tracks_.Get(index);
}
inline ::Singul::Track* Part::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:Singul.Part.tracks)
  return tracks_.Mutable(index);
}
inline ::Singul::Track* Part::add_tracks() {
  // @@protoc_insertion_point(field_add:Singul.Part.tracks)
  return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Singul::Track >*
Part::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:Singul.Part.tracks)
  return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Singul::Track >&
Part::tracks() const {
  // @@protoc_insertion_point(field_list:Singul.Part.tracks)
  return tracks_;
}

// -------------------------------------------------------------------

// Track

// int32 volume = 1;
inline void Track::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 Track::volume() const {
  // @@protoc_insertion_point(field_get:Singul.Track.volume)
  return volume_;
}
inline void Track::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:Singul.Track.volume)
}

// bool muted = 2;
inline void Track::clear_muted() {
  muted_ = false;
}
inline bool Track::muted() const {
  // @@protoc_insertion_point(field_get:Singul.Track.muted)
  return muted_;
}
inline void Track::set_muted(bool value) {
  
  muted_ = value;
  // @@protoc_insertion_point(field_set:Singul.Track.muted)
}

// int32 number_of_tick = 3;
inline void Track::clear_number_of_tick() {
  number_of_tick_ = 0;
}
inline ::google::protobuf::int32 Track::number_of_tick() const {
  // @@protoc_insertion_point(field_get:Singul.Track.number_of_tick)
  return number_of_tick_;
}
inline void Track::set_number_of_tick(::google::protobuf::int32 value) {
  
  number_of_tick_ = value;
  // @@protoc_insertion_point(field_set:Singul.Track.number_of_tick)
}

// int32 tick_offset = 4;
inline void Track::clear_tick_offset() {
  tick_offset_ = 0;
}
inline ::google::protobuf::int32 Track::tick_offset() const {
  // @@protoc_insertion_point(field_get:Singul.Track.tick_offset)
  return tick_offset_;
}
inline void Track::set_tick_offset(::google::protobuf::int32 value) {
  
  tick_offset_ = value;
  // @@protoc_insertion_point(field_set:Singul.Track.tick_offset)
}

// .Singul.AudioLoop loop_a = 10;
inline bool Track::has_loop_a() const {
  return this != internal_default_instance() && loop_a_ != NULL;
}
inline void Track::clear_loop_a() {
  if (GetArenaNoVirtual() == NULL && loop_a_ != NULL) delete loop_a_;
  loop_a_ = NULL;
}
inline const ::Singul::AudioLoop& Track::loop_a() const {
  const ::Singul::AudioLoop* p = loop_a_;
  // @@protoc_insertion_point(field_get:Singul.Track.loop_a)
  return p != NULL ? *p : *reinterpret_cast<const ::Singul::AudioLoop*>(
      &::Singul::_AudioLoop_default_instance_);
}
inline ::Singul::AudioLoop* Track::mutable_loop_a() {
  
  if (loop_a_ == NULL) {
    loop_a_ = new ::Singul::AudioLoop;
  }
  // @@protoc_insertion_point(field_mutable:Singul.Track.loop_a)
  return loop_a_;
}
inline ::Singul::AudioLoop* Track::release_loop_a() {
  // @@protoc_insertion_point(field_release:Singul.Track.loop_a)
  
  ::Singul::AudioLoop* temp = loop_a_;
  loop_a_ = NULL;
  return temp;
}
inline void Track::set_allocated_loop_a(::Singul::AudioLoop* loop_a) {
  delete loop_a_;
  loop_a_ = loop_a;
  if (loop_a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Singul.Track.loop_a)
}

// .Singul.AudioLoop loop_b = 11;
inline bool Track::has_loop_b() const {
  return this != internal_default_instance() && loop_b_ != NULL;
}
inline void Track::clear_loop_b() {
  if (GetArenaNoVirtual() == NULL && loop_b_ != NULL) delete loop_b_;
  loop_b_ = NULL;
}
inline const ::Singul::AudioLoop& Track::loop_b() const {
  const ::Singul::AudioLoop* p = loop_b_;
  // @@protoc_insertion_point(field_get:Singul.Track.loop_b)
  return p != NULL ? *p : *reinterpret_cast<const ::Singul::AudioLoop*>(
      &::Singul::_AudioLoop_default_instance_);
}
inline ::Singul::AudioLoop* Track::mutable_loop_b() {
  
  if (loop_b_ == NULL) {
    loop_b_ = new ::Singul::AudioLoop;
  }
  // @@protoc_insertion_point(field_mutable:Singul.Track.loop_b)
  return loop_b_;
}
inline ::Singul::AudioLoop* Track::release_loop_b() {
  // @@protoc_insertion_point(field_release:Singul.Track.loop_b)
  
  ::Singul::AudioLoop* temp = loop_b_;
  loop_b_ = NULL;
  return temp;
}
inline void Track::set_allocated_loop_b(::Singul::AudioLoop* loop_b) {
  delete loop_b_;
  loop_b_ = loop_b;
  if (loop_b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Singul.Track.loop_b)
}

// -------------------------------------------------------------------

// AudioLoop

// int32 number_of_frames = 1;
inline void AudioLoop::clear_number_of_frames() {
  number_of_frames_ = 0;
}
inline ::google::protobuf::int32 AudioLoop::number_of_frames() const {
  // @@protoc_insertion_point(field_get:Singul.AudioLoop.number_of_frames)
  return number_of_frames_;
}
inline void AudioLoop::set_number_of_frames(::google::protobuf::int32 value) {
  
  number_of_frames_ = value;
  // @@protoc_insertion_point(field_set:Singul.AudioLoop.number_of_frames)
}

// string filename = 2;
inline void AudioLoop::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioLoop::filename() const {
  // @@protoc_insertion_point(field_get:Singul.AudioLoop.filename)
  return filename_.GetNoArena();
}
inline void AudioLoop::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Singul.AudioLoop.filename)
}
#if LANG_CXX11
inline void AudioLoop::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Singul.AudioLoop.filename)
}
#endif
inline void AudioLoop::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Singul.AudioLoop.filename)
}
inline void AudioLoop::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Singul.AudioLoop.filename)
}
inline ::std::string* AudioLoop::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:Singul.AudioLoop.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioLoop::release_filename() {
  // @@protoc_insertion_point(field_release:Singul.AudioLoop.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioLoop::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Singul.AudioLoop.filename)
}

// bool undo = 3;
inline void AudioLoop::clear_undo() {
  undo_ = false;
}
inline bool AudioLoop::undo() const {
  // @@protoc_insertion_point(field_get:Singul.AudioLoop.undo)
  return undo_;
}
inline void AudioLoop::set_undo(bool value) {
  
  undo_ = value;
  // @@protoc_insertion_point(field_set:Singul.AudioLoop.undo)
}

// float visual_gain = 10;
inline void AudioLoop::clear_visual_gain() {
  visual_gain_ = 0;
}
inline float AudioLoop::visual_gain() const {
  // @@protoc_insertion_point(field_get:Singul.AudioLoop.visual_gain)
  return visual_gain_;
}
inline void AudioLoop::set_visual_gain(float value) {
  
  visual_gain_ = value;
  // @@protoc_insertion_point(field_set:Singul.AudioLoop.visual_gain)
}

// -------------------------------------------------------------------

// TimeSignature

// int32 numerator = 1;
inline void TimeSignature::clear_numerator() {
  numerator_ = 0;
}
inline ::google::protobuf::int32 TimeSignature::numerator() const {
  // @@protoc_insertion_point(field_get:Singul.TimeSignature.numerator)
  return numerator_;
}
inline void TimeSignature::set_numerator(::google::protobuf::int32 value) {
  
  numerator_ = value;
  // @@protoc_insertion_point(field_set:Singul.TimeSignature.numerator)
}

// int32 denonimator = 2;
inline void TimeSignature::clear_denonimator() {
  denonimator_ = 0;
}
inline ::google::protobuf::int32 TimeSignature::denonimator() const {
  // @@protoc_insertion_point(field_get:Singul.TimeSignature.denonimator)
  return denonimator_;
}
inline void TimeSignature::set_denonimator(::google::protobuf::int32 value) {
  
  denonimator_ = value;
  // @@protoc_insertion_point(field_set:Singul.TimeSignature.denonimator)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Singul

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_song_2eproto__INCLUDED
